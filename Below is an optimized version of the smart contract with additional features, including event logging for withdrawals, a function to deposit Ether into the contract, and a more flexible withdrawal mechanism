// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

contract AdvancedSmartContract is Ownable {
    uint256 private data;
    uint256 private contractBalance;

    event DataUpdated(uint256 newData);
    event EtherDeposited(address indexed sender, uint256 amount);
    event EtherWithdrawn(address indexed recipient, uint256 amount);

    constructor(uint256 initialData) {
        data = initialData;
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data, "New data must be different from current data");
        data = newData;
        emit DataUpdated(newData);
    }

    function getData() external view returns (uint256) {
        return data;
    }

    function getContractBalance() external view onlyOwner returns (uint256) {
        return contractBalance;
    }

    // Function to deposit Ether into the contract
    function deposit() external payable {
        require(msg.value > 0, "Amount must be greater than 0");
        contractBalance += msg.value;
        emit EtherDeposited(msg.sender, msg.value);
    }

    // Function to withdraw Ether from the contract, only callable by the owner
    function withdraw(address payable recipient, uint256 amount) external onlyOwner {
        require(amount > 0, "Withdrawal amount must be greater than 0");
        require(amount <= contractBalance, "Insufficient contract balance");
        
        contractBalance -= amount;
        recipient.transfer(amount);

        emit EtherWithdrawn(recipient, amount);
    }

    // Fallback function to receive Ether
    receive() external payable {
        // You may choose to handle incoming Ether transactions here
    }
}
