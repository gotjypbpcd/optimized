// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EnhancedStorageETH {
    address public owner;
    address public newOwnerCandidate;
    string public storedData;
    uint256 public creationTimestamp;
    bool public isLocked;

    event DataStored(address indexed user, string data);
    event DataDeleted(address indexed deleter);
    event EtherReceived(address indexed sender, uint256 amount);
    event EtherWithdrawn(address indexed receiver, uint256 amount);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier notLocked() {
        require(!isLocked, "Contract is locked and data cannot be modified");
        _;
    }

    constructor() {
        owner = msg.sender;
        creationTimestamp = block.timestamp;
        isLocked = false;
    }

    receive() external payable {
        emit EtherReceived(msg.sender, msg.value);
    }

    function set(string memory newData) external onlyOwner notLocked {
        storedData = newData;
        emit DataStored(msg.sender, newData);
    }

    function get() external view returns (string memory) {
        return storedData;
    }

    function deleteData() external onlyOwner notLocked {
        delete storedData;
        emit DataDeleted(msg.sender);
    }

    function lockContract() external onlyOwner {
        isLocked = true;
    }

    function unlockContract() external onlyOwner {
        isLocked = false;
    }

    function withdrawEther(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Insufficient contract balance");
        payable(owner).transfer(amount);
        emit EtherWithdrawn(owner, amount);
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address");
        newOwnerCandidate = newOwner;
    }

    function acceptOwnership() external {
        require(msg.sender == newOwnerCandidate, "Only the new owner candidate can accept ownership");
        emit OwnershipTransferred(owner, newOwnerCandidate);
        owner = newOwnerCandidate;
        newOwnerCandidate = address(0);
    }
}
